package qfs

import (
  "testing"
  "bytes"
  "errors"
)

func TestEncodeWithZeroBytes(t *testing.T) {
  buffer := new(bytes.Buffer)
  data := make([]byte, 0)

  if e := Encode(buffer, data); e != nil {
    t.Error()
  }

  expected := []byte{ 0x10, 0xFB, 0x0, 0x0, 0x0, 0xFC }

  CheckIfSlicesAreEqual(t, buffer.Bytes(), expected)
}

func TestEncodeWithSingleByte(t *testing.T) {
  buffer := new(bytes.Buffer)
  data := []byte{ 0xA5 }

  if e := Encode(buffer, data); e != nil {
    t.Error()
  }

  expected := []byte{ 0x10, 0xFB, 0x0, 0x0, 0x1, 0xFD, 0xA5 }

  CheckIfSlicesAreEqual(t, buffer.Bytes(), expected)
}

// CreateSampleData creates a byte slice that can be used to test the Encode
// function.  It takes a count and an offset argument and generates a sequence
// of bytes that starts with the byte 0xAA, then consists of non repeating bytes
// in the range of 0x00 to 0x7F (offset - 1), and then ends with a repeating chain of length
// count of the byte 0xAA.
func CreateSampleData(count, offset int) []byte {
  result := make([]byte, offset + count)
  result[0] = byte(0xAA)
  for i := 1; i < offset; i++ {
    result[i] = byte(i % 128)
  }

  for i := 0; i < count; i++ {
    result[offset + i] = byte(0xAA)
  }

  return result
}

func TestEncodeWithA3ByteChain(t *testing.T) {
  buffer := new(bytes.Buffer)
  data := CreateSampleData(3, 2)

  if e := Encode(buffer, data); e != nil {
    t.Error()
  }

  expected := []byte{ 0x10, 0xFB, 0x0, 0x0, 0x5, 0x2, 0x1, 0xAA, 0x1, 0xFC }

  CheckIfSlicesAreEqual(t, buffer.Bytes(), expected)
}

func TestEncodeWithA4ByteChainAndSmallOffset(t *testing.T) {
  buffer := new(bytes.Buffer)
  data := CreateSampleData(4, 2)

  if e := Encode(buffer, data); e != nil {
    t.Error()
  }

  expected := []byte{ 0x10, 0xFB, 0x0, 0x0, 0x6, 0x6, 0x1, 0xAA, 0x1, 0xFC }

  CheckIfSlicesAreEqual(t, buffer.Bytes(), expected)
}

func TestEncodeWithA4ByteChainAndMediumOffset(t *testing.T) {
  buffer := new(bytes.Buffer)
  data := CreateSampleData(4, 1025)

  if e := Encode(buffer, data); e != nil {
    t.Error()
  }

  expected := []byte{ 0x10, 0xFB, 0x0, 0x4, 0x5, 0xFB, 0xAA,
     0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
     0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
     0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
     0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
     0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
     0xFB,
     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
     0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
     0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
     0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
     0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
     0xFB,
     0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
     0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
     0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
     0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
     0xFB,
     0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
     0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
     0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
     0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
     0xFB,
     0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
     0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
     0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
     0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
     0xFB,
     0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
     0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
     0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
     0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
     0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
     0xFB,
     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
     0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
     0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
     0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
     0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
     0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
     0xFB,
     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
     0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
     0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
     0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
     0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
     0xFB,
     0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
     0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
     0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
     0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
     0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
     0xE3,
     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
     0x80, 0x44, 0x0, 0x0, 0xFC }

  CheckIfSlicesAreEqual(t, buffer.Bytes(), expected)
}

func TestEncodeWith68ByteChain(t *testing.T) {
  buffer := new(bytes.Buffer)
  data := CreateSampleData(68, 2)

  if e := Encode(buffer, data); e != nil {
    t.Error()
  }

  expected := []byte{ 0x10, 0xFB, 0x0, 0x0, 0x46, 0xC2, 0x0,
     0x1, 0x3F, 0xAA, 0x1, 0xFC }

  CheckIfSlicesAreEqual(t, buffer.Bytes(), expected)
}

func TestEncodeWithMultipleRepeatingChains(t *testing.T) {
  buffer := new(bytes.Buffer)
  data := []byte{ 0xA5, 0x24, 0x5C, 0x71, 0xA5, 0xA5, 0xA5, 0x2E, 0x6A, 0x71, 0x71, 0x71, 0x71, 0x88, 0x04 }

  if e := Encode(buffer, data); e != nil {
    t.Error()
  }

  expected := []byte{ 0x10, 0xFB, 0x0, 0x0, 0xF, 0xE0, 0xA5, 0x24, 0x5C, 0x71, 0x0, 0x3, 0x6, 0x5, 0x2E, 0x6A, 0xFE, 0x88, 0x04 }

  CheckIfSlicesAreEqual(t, buffer.Bytes(), expected)
}

func TestDecodeZeroBytes(t *testing.T) {
  buffer := bytes.NewBuffer([]byte{ 0x10, 0xFB, 0x0, 0x0, 0x0, 0xFC })

  data, e := Decode(buffer)
  if e != nil {
    t.Error()
  }

  expected := make([]byte, 0)

  CheckIfSlicesAreEqual(t, data, expected)
}

func TestDecodeSingleByte(t *testing.T) {
  buffer := bytes.NewBuffer([]byte{ 0x10, 0xFB, 0x0, 0x0, 0x1, 0xFD, 0x47 })

  data, e := Decode(buffer)
  if e != nil {
    t.Error()
  }

  expected := []byte{ 0x47 }

  CheckIfSlicesAreEqual(t, data, expected)
}

func TestDecodeSingle3ByteChain(t *testing.T) {
  buffer := bytes.NewBuffer([]byte{ 0x10, 0xFB, 0x0, 0x0, 0x7, 0x03, 0x02, 0x47, 0x69, 0x22, 0xFD, 0x3D })

  data, e := Decode(buffer)
  if e != nil {
    t.Error()
  }

  expected := []byte{ 0x47, 0x69, 0x22, 0x47, 0x47, 0x47, 0x3D }

  CheckIfSlicesAreEqual(t, data, expected)
}

func TestDecodeMultipleByteChains(t *testing.T) {
  buffer := bytes.NewBuffer([]byte{ 0x10, 0xFB, 0x0, 0x0, 0xF, 0xE0, 0xA5, 0x24, 0x5C, 0x71, 0x0, 0x3, 0x6, 0x5, 0x2E, 0x6A, 0xFE, 0x88, 0x04 })

  data, e := Decode(buffer)
  if e != nil {
    t.Error()
  }

  expected := []byte{ 0xA5, 0x24, 0x5C, 0x71, 0xA5, 0xA5, 0xA5, 0x2E, 0x6A, 0x71, 0x71, 0x71, 0x71, 0x88, 0x04 }

  CheckIfSlicesAreEqual(t, data, expected)
}

func CheckIfSlicesAreEqual(t *testing.T, actual []byte, expected []byte) {
  if len(actual) != len(expected) {
    t.Errorf("Actual slice size %d didn't match expected size %d", len(actual), len(expected))
  }

  for i, v := range actual {
    if v != expected[i] {
      t.Errorf("Byte %d: expected %2x, but actually was %2x", i, expected[i], v)
    }
  }
}

type BadWriter struct {
  FailingMark int
  currentPos int
}

func (w *BadWriter) Write(data []byte) (int, error) {
  if w.FailingMark > w.currentPos + len(data) {
    w.currentPos += len(data)
    return len(data), nil
  } else {
    n := w.FailingMark - w.currentPos
    return n, errors.New("Reached expected failing point")
  }
}

func TestWithFailingWriter(t *testing.T) {
  badWriter := &BadWriter{FailingMark: 0}
  e := Encode(badWriter, []byte{0xAA, 0x55, 0xAA, 0x55})

  if e == nil {
    t.Error()
  }

  badWriter.FailingMark = 4
  e = Encode(badWriter, []byte{0xAA, 0x55, 0xAA, 0x55})

  if e == nil {
    t.Error()
  }
}
